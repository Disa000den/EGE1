Встречается разное говно, но в основном на решение по количеству точек в заданной области. И так:
Для решение на область, где не нужно учитывать точки на линии берём алгоритм, который будет делать всё за нас
from turtle import * (импортим черепаху)
color('black', 'red') (задаём цвета областей, потому что так надо)
m = 100 (это масштаб наших точек. Сотка здесь для того, чтобы алгоритм работал точно)
speed(1000) (Здесь мы превращаем нашу черепаху в молнию МакУин)
begin_fill() (это чисто чтоб началась наша рисовка)
left(90) (возвращаем нос черепахе в положение вверх, так как по дефолту она смотрит вправо)
right(45) (опционально, потому что её приходится поворачивать по разному. Эта строка зависит от условия задания)
for i in range(2):
    forward(5 * m)
    right(45)
    forward(10 * m)
    right(135)
    (в строках после диапозона для i мы задаём наш алгоритм. Очень внимательно ставим рэндж движения, так как
    если мы для треугольника поставим рэндж повторения 6, то эта хуйня нам нарисует 3 треугольника и посчитает точки
    на 3 треугольника. Чтобы этого избежать сначала смотрим чё эт за фигура будет, а потом уже ставим рендж для повторения
    этой фигуры)
end_fill() (это тоже надо, тут даже не задумываясь)
canvas = getcanvas() (это переменная для наших точек. Какая-то умная залупа, которая будет за нас всё считать)
cnt = 0 (счётчик точек)
for x in range(-100 * m, 100 * m, m):
    for y in range(-100 * m, 100 * m, m): (диапозон x и y нужен для уставноления якобы сетки рисовки, но для компа это
    будет сетка точек. Кароче, тоже так надо)
        item = canvas.find_overlapping(x, y, x, y) (уже идёт разметка нашего листа для компа какой-то умной хуйней, которую мы ввели ранее)
  *********Вот это две пиздец важные строчки******************
        if len(item) == 1 and item[0] == 5: (здесь нам посчитают точки ИСКЛЮЧИТЕЛЬНО внутри фигуры)
        if len(item) >= 1: (здесь нам посчитают точки внутри фигуры и НА ГРАНИЦЕ чертежа, если таковы имеются)
            cnt += 1 (тупо счётчик ёпта)
print(cnt) (вывод циферок)
done() (ну и чтоб посмотреть чё там ваще получилось)
Лайфхаки:
1. Если хз чё за фигура, то делай масштаб меньше и смотри чё он рисует, потом по алгоритму думай, сколько раз ему надо
повториться чтобы у тебя получилась твоя фигура один раз
2. Было задание, где нужно было посчитать точки на линиях, которые эта хуйня нарисует. Тут только дефолт через разметку
и goto() и dot()
3. Было задание, где нужно было подобрать коэффицент, при котором у тебя внутри фигуры будет лежать больше скольки то точек)
Тут ваще не о чём. Вводишь доп переменную(какую-нибудь k и в ней меняешь значение) и заместо твоих forward(10 * m)
будет forward(k * m)
Спамишь алгоритмом, пока он не найдёт нужный коэффицент. ГЛАВНОЕ: коэф должнен быть целочисленным